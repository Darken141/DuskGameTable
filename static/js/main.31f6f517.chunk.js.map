{"version":3,"sources":["components/Table.js","App.js","serviceWorker.js","index.js","DuskLogo.png"],"names":["Table","react_default","a","createElement","className","cellSpacing","particlesOption","particles","number","value","density","enable","value_area","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","route","particles_default","params","src","logo","alt","components_Table","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6RAqDeA,EAnDD,WACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gBAAgBC,YAAY,KACzCJ,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gDAAd,QACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gDAAd,UACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gDAAd,SACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gDAAd,UAGJH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,aACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,MAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,aACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,MACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,MAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,YACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,MAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,YACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,MAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,sBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,WCrClBE,SAAkB,CACtBC,UAAW,CACTC,OAAQ,CACNC,MAAO,GACPC,QAAS,CACPC,QAAQ,EACRC,WAAY,SA4BLC,cArBb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,MAAO,QAHER,wEAQX,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAWE,UAAU,YAAYoB,OAAQlB,IACzCL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWqB,IAAKC,IAAMC,IAAI,sBACzC1B,EAAAC,EAAAC,cAACyB,EAAD,eAdQC,IAAMC,iBCPJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.31f6f517.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Table = () => {\r\n    return (\r\n        <div className=\"pa4\">\r\n            <div className=\"overflow-auto shadow-3\">\r\n                <table className=\"f8 w-100 mw10\" cellSpacing=\"0\">\r\n                    <thead>\r\n                        <tr className=\"stripe-dark\">\r\n                        <th className=\"fw6 tl pa3 bg-navy white bb b--lightest-blue\">Game</th>\r\n                        <th className=\"fw6 tl pa3 bg-navy white bb b--lightest-blue\">Tables</th>\r\n                        <th className=\"fw6 tl pa3 bg-navy white bb b--lightest-blue\">Seats</th>\r\n                        <th className=\"fw6 tl pa3 bg-navy white bb b--lightest-blue\">Wait</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"lh-copy white\">\r\n                        <tr className=\"stripe-dark\">\r\n                        <td className=\"pa3\">NHLE 1/1 </td>\r\n                        <td className=\"pa3\">1</td>\r\n                        <td className=\"pa3\">8</td>\r\n                        <td className=\"pa3\">3</td>\r\n                        </tr>\r\n                        <tr className=\"stripe-dark\">\r\n                        <td className=\"pa3\">NHLE 1/2 </td>\r\n                        <td className=\"pa3\">3</td>\r\n                        <td className=\"pa3\">22</td>\r\n                        <td className=\"pa3\">0</td>\r\n                        </tr>\r\n                        <tr className=\"stripe-dark\">\r\n                        <td className=\"pa3\">PLO 1/1 </td>\r\n                        <td className=\"pa3\">1</td>\r\n                        <td className=\"pa3\">4</td>\r\n                        <td className=\"pa3\">0</td>\r\n                        </tr>\r\n                        <tr className=\"stripe-dark\">\r\n                        <td className=\"pa3\">PLO 2/2 </td>\r\n                        <td className=\"pa3\">1</td>\r\n                        <td className=\"pa3\">7</td>\r\n                        <td className=\"pa3\">0</td>\r\n                        </tr>\r\n                        <tr className=\"stripe-dark\">\r\n                        <td className=\"pa3\">Dealer Choice 1/1 </td>\r\n                        <td className=\"pa3\">0</td>\r\n                        <td className=\"pa3\">0</td>\r\n                        <td className=\"pa3\">2</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import React from 'react';\nimport logo from './DuskLogo.png';\nimport Particles from 'react-particles-js';\nimport Table from './components/Table';\nimport Dashboard from './components/DashBoard';\nimport './App.css';\n\nconst particlesOption = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 200\n      }\n    }\n  }\n}\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      route: \"home\"\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Particles className=\"particles\" params={particlesOption}/>\n      <div>\n          <img className=\"logo pt4\" src={logo} alt=\"DuskTillDawn-Logo\"/>\n          <Table/> \n      </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/DuskLogo.4fa4780b.png\";"],"sourceRoot":""}